# 删除索引
DELETE /mybooks

# 创建索引
PUT /mybooks
{
  "mappings": {
    "properties": {
      "join_field": {
        "type": "join",
        "relations": {
          "order": "item"
        }
      },
      "position": {
        "type": "integer",
        "store": true
      },
      "uuid": {
        "store": true,
        "type": "keyword"
      },
      "date": {
        "type": "date"
      },
      "quantity": {
        "type": "integer"
      },
      "price": {
        "type": "double"
      },
      "description": {
        "term_vector": "with_positions_offsets",
        "store": true,
        "type": "text"
      },
      "title": {
        "term_vector": "with_positions_offsets",
        "store": true,
        "type": "text",
        "fielddata": true,
        "fields": {
          "keyword": {
            "type": "keyword",
            "ignore_above": 256
          }
        }
      }
    }
  }
}

# 批量添加文档
POST _bulk?refresh
{"index":{"_index":"mybooks", "_id":"1"}}
{"uuid":"11111","position":1,"title":"Joe Tester","description":"Joe Testere nice guy","date":"2015-10-22","price":4.3,"quantity":50}
{"index":{"_index":"mybooks", "_id":"2"}}
{"uuid":"22222","position":2,"title":"Bill Baloney","description":"Bill Testere nice guy","date":"2016-06-12","price":5,"quantity":34}
{"index":{"_index":"mybooks", "_id":"3"}}
{"uuid":"33333","position":3,"title":"Bill Klingon","description":"Bill is not\n                nice guy","date":"2017-09-21","price":6,"quantity":33}

# 添加文档
PUT /mybooks/_doc/1
{
  "uuid": "11111",
  "position": 1,
  "title": "Joe Tester",
  "description": "Joe Testere nice guy",
  "date": "2015-10-22",
  "price": 4.3,
  "quantity": 50
}

PUT /mybooks/_doc/2
{
  "uuid": "22222",
  "position": 2,
  "title": "Bill Baloney",
  "description": "Bill Testere nice guy",
  "date": "2016-06-12",
  "price": 5,
  "quantity": 34
}


PUT /mybooks/_doc/3
{
  "uuid": "33333",
  "position": 3,
  "title": "Bill Klingon",
  "description": "Bill is not\n                nice guy",
  "date": "2017-09-21",
  "price": 6,
  "quantity": 33
}

POST /mybooks/_refresh
GET /_cluster/health?wait_for_status=green&timeout=0s

# 创建mybooks-join索引
DELETE /mybooks-join

PUT /mybooks-join
{
  "mappings": {
      "properties": {
        "join": {
          "type": "join",
          "relations": {
            "book": "author"
          }
        },
        "position": {
          "type": "integer",
          "store": true
        },
        "uuid": {
          "store": true,
          "type": "keyword"
        },
        "date": {
          "type": "date"
        },
        "quantity": {
          "type": "integer"
        },
        "price": {
          "type": "double"
        },
        "rating": {
          "type": "double"
        },
        "description": {
          "term_vector": "with_positions_offsets",
          "store": true,
          "type": "text"
        },
        "title": {
          "term_vector": "with_positions_offsets",
          "store": true,
          "type": "text",
          "fielddata": true,
          "fields": {
            "keyword": {
              "type": "keyword",
              "ignore_above": 256
            }
          }
        },
        "name": {
          "type": "text",
          "fields": {
            "keyword": {
              "type": "keyword",
              "ignore_above": 256
            }
          }
        },
        "surname": {
          "type": "text",
          "fields": {
            "keyword": {
              "type": "keyword",
              "ignore_above": 256
            }
          }
        },
        "versions": {
          "type": "nested",
          "properties": {
            "color": {
              "type": "keyword"
            },
            "size": {
              "type": "integer"
            }
          }
        }
      }
  }
}

POST _bulk?refresh
{"index":{"_index":"mybooks-join", "_id":"1"}}
{"uuid":"11111","position":1,"title":"Joe Tester","description":"Joe Testere nice guy","date":"2015-10-22","price":4.3,"quantity":50,"join": {"name": "book"}, "versions":[{"color":"yellow", "size":5},{"color":"blue", "size":15}]}
{"index":{"_index":"mybooks-join", "_id":"a1", "routing":"1"}}
{"name":"Peter","surname":"Doyle","rating":4.5,"join": {"name": "author", "parent":"1"}}
{"index":{"_index":"mybooks-join", "_id":"a12", "routing":"1"}}
{"name":"Mark","surname":"Twain","rating":4.2,"join": {"name": "author", "parent":"1"}}
{"index":{"_index":"mybooks-join", "_id":"2"}}
{"uuid":"22222","position":2,"title":"Bill Baloney","description":"Bill Testere nice guy","date":"2016-06-12","price":5,"quantity":34,"join": {"name": "book"}, "versions":[{"color":"red", "size":2},{"color":"blue", "size":10}]}
{"index":{"_index":"mybooks-join", "_id":"a2", "routing":"2"}}
{"name":"Agatha","surname":"Princeton","rating":2.1,"join": {"name": "author", "parent":"2"}}
{"index":{"_index":"mybooks-join", "_id":"3"}}
{"uuid":"33333","position":3,"title":"Bill Klingon","description":"Bill is not\n                nice guy","date":"2017-09-21","price":6,"quantity":33,"join": {"name": "book"}, "versions":[{"color":"red", "size":2}]}
{"index":{"_index":"mybooks-join", "_id":"a3", "routing":"3"}}
{"name":"Martin","surname":"Twisted","rating":3.2,"join": {"name": "author", "parent":"3"}}

POST /mybooks-join/_refresh

# 创建GEO索引x
DELETE /mygeo-index

PUT /mygeo-index
{
  "mappings": {
    "properties": {
      "pin": {
        "properties": {
          "location": {
            "type": "geo_point"
          }
        }
      }
    }
  }
}

PUT /mygeo-index/_doc/1
{"pin": {"location": {"lat": 40.12, "lon": -71.34}}}

PUT /mygeo-index/_doc/2
{"pin": {"location": {"lat": 40.12, "lon": 71.34}}}

POST /mygeo-index/_refresh

###########
# 搜索示例
###########
GET /mybooks/_search
{
  "query": {
    "match_all": {}
  }
}

# 使用请求参数q简单字符串查询示例
GET /mybooks/_search?q=uuid:11111

# df参数定义默认字段
GET /mybooks/_search?df=uuid&q=11111

GET /mybooks/_search?q=title:joe&explain=true

GET /mybooks/_search?q=title:joe&stored_fields=title

# 指定排序方式
GET /mybooks/_search?sort=title.keyword:desc

# 如果不支持GET请求携带BODY参数，考虑POST的方式
POST /mybooks/_search
{
  "query": {
    "match": {
      "description": {
        "operator": "or",
        "query": "nice guy joe"
      }
    }
  },
  "rescore": {
    "window_size": 100,
    "query": {
      "rescore_query": {
        "match_phrase": {
          "description": {
            "query": "joe nice guy",
            "slop": 2
          }
        }
      },
      "query_weight": 0.8,
      "rescore_query_weight": 1.5
    }
  }
}

# 查询定义排序方法
GET /mybooks/_search
{
  "query": {
    "match_all": {}
  },
  "sort": [
    {
      "price": {
        "order": "asc",
        "mode": "avg",
        "unmapped_type": "double",
        "missing": "_last"
      }
    },
    "_score"
  ]
}

GET /mybooks/_search?sort=title:desc
GET /mybooks/_search?sort=title.keyword:desc

# 返回高亮查询结果
GET /mybooks/_search?from=0&size=10
{
  "query": {
    "query_string": {
      "query": "joe"
    }
  },
  "highlight": {
    "pre_tags": [
      "<b>"
    ],
    "fields": {
      "description": {
        "order": "score"
      },
      "title": {
        "order": "score"
      }
    },
    "post_tags": [
      "</b>"
    ]
  }
}

# 游标查询示例
GET /mybooks/_search?scroll=10m&size=1
{
  "query": {
    "match_all": {}
  }
}

POST /_search/scroll
{
    "scroll" : "10m",
    "scroll_id" : "DXF1ZXJ5QW5kRmV0Y2gBAAAAAAAHdMUWNHBwdFp4NGpTTS14Y3BpVlRfZDdSdw=="
}

GET /mybooks/_search?scroll=10m&size=1
{
  "query": {
    "match_all": {}
  },
  "sort": [
    "_doc"
  ]
}

DELETE /_search/scroll
{
  "scroll_id": [
    "DnF1ZXJ5VGhlbkZldGNoBQAA..."
  ]
}

DELETE /_search/scroll/_all

# search_after查询方法示例
# 需要记录sort的查询结果值
GET /mybooks/_search
{
  "size": 1,
  "query": {
    "match_all": {}
  },
  "sort": [
    {
      "price": "asc"
    },
    {
      "_doc": "desc"
    }
  ]
}

GET /mybooks/_search
{
  "size": 1,
  "query": {
    "match_all": {}
  },
  "search_after": [
    4.3,
    0
  ],
  "sort": [
    {
      "price": "asc"
    },
    {
      "_doc": "desc"
    }
  ]
}

# 查询嵌套文档示例
POST /mybooks-join/_search
{
  "query": {
    "has_child": {
      "type": "author",
      "query": {
        "term": {
          "name": "peter"
        }
      },
      "inner_hits": {}
    }
  }
}

# 查询建议
GET /mybooks/_search
{
  "suggest": {
    "suggest1": {
      "text": "we find tester",
      "term": {
        "field": "description"
      }
    }
  }
}

# 数量查询
GET /mybooks/_count
{
  "query": {
    "match_all": {}
  }
}

GET /mybooks/_count?q=uuid:11111

# 解释查询
GET /mybooks/_explain/1?pretty
{
  "query": {
    "term": {
      "uuid": "11111"
    }
  }
}

# profile查询
GET /mybooks/_search
{
  "profile": true,
  "query": {
    "term": {
      "uuid": "11111"
    }
  }
}

# 根据查询条件删除文档
POST /mybooks/_delete_by_query
{
  "query": {
    "match_all": {}
  }
}

POST /mybooks/_delete_by_query?q=uuid:11111

# 更新特定文档
POST /mybooks/_update_by_query
{
  "query": {
    "match_all": {}
  },
  "script": {
    "source": "ctx._source.quantity=50"
  }
}

POST /mybooks/_update_by_query
{
  "script": {
    "source": "ctx._source.hit=4"
  },
  "query": {
    "match_all": {}
  }
}


# 查询种类示例
# 查询全部
POST /mybooks/_search
{
  "query": {
    "match_all": {}
  }
}

# 布尔查询
# 适合用于复杂查询
POST /mybooks/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "description": "joe"
          }
        }
      ],
      "must_not": [
        {
          "range": {
            "position": {
              "from": 10,
              "to": 20
            }
          }
        }
      ],
      "should": [
        {
          "term": {
            "uuid": "11111"
          }
        },
        {
          "term": {
            "uuid": "22222"
          }
        }
      ],
      "filter": [
        {
          "term": {
            "description": "joe"
          }
        }
      ],
      "minimum_should_match": 1,
      "boost": 1
    }
  }
}

POST /mybooks/_search
{
  "query": {
    "bool": {
          "should": [
        {
          "term": {
            "uuid": {
              "value": "11111",
              "_name": "uuid:11111:matched"
            }
          }
        },
        {
          "term": {
            "uuid": {
              "value": "22222",
              "_name": "uuid:22222:matched"
            }
          }
        }
      ],
      "filter": [
        {
          "term": {
            "description": {
              "value": "joe",
              "_name": "fiter:term:joe"
            }
          }
        }
      ],
      "minimum_should_match": 1,
      "boost": 1
    }
  }
}

# 搜索模板
POST /_search/template
{
  "source": {
    "query": {
      "term": {
        "uuid": "{{value}}"
      }
    }
  },
  "params": {
    "value": "22222"
  }
}

POST /_scripts/myTemplate
{
  "script": {
    "lang": "mustache",
    "source": {
      "query": {
        "term": {
          "uuid": "{{value}}"
        }
      }
    }
  }
}

POST /mybooks/_search/template
{
  "id": "myTemplate",
  "params": {
    "value": "22222"
  }
}

# 验证自定义模板查询
POST /_render/template
{
  "id": "myTemplate",
  "params": {
    "value": "22222"
  }
}

